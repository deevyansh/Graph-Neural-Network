# -*- coding: utf-8 -*-
"""Understanding the GNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MGuppC8Lyez4efmG6v9CrRklAMPJEfyB

# Graph Programming in Python
"""

!pip install networkx
import networkx as nx

G=nx.Graph()

nx.draw(G)

G.add_node(1)

G.add_nodes_from([2,3])
nx.draw(G)

G.add_edge(1,2)

nx.draw(G)

G.add_edges_from([(1,2),(2,3),(3,1)])
nx.draw(G)

G.add_nodes_from([4,5,6,7,8])
nx.draw(G)

G.add_edges_from([(5,1),(6,7)])
nx.draw(G)

G.add_edges_from([(4,3),(7,3)])
nx.draw(G)

print(G.number_of_nodes())
print(G.number_of_edges())

G.nodes

G.edges

G.graph

"""# JSON"""

from networkx.readwrite import json_graph
json_data=json_graph.node_link_data(G)
json_data

json_graph=json_graph.node_link_graph(json_data)
json_graph

nx.draw(json_graph)

G=json_graph
G.add_nodes_from([9,10])
nx.draw(G)

G.remove_node(10)
nx.draw(G)

G.order()

G.clear()

"""# Function"""

G.add_edges_from([(1,2),(2,3),(3,1)])
G.add_node('spam')
G.add_nodes_from('spam')
nx.draw(G)

from networkx.classes.function import density,degree,degree_histogram
print(density(G))
print(degree(G))
print(degree_histogram(G))

"""# Neighbors"""

from networkx.classes.function import neighbors
for node in G:
  print(node)
  print(list(G.neighbors(node)))

"""# Path Graphs"""

G=nx.path_graph(4)
nx.draw(G)
print(nx.is_weighted(G))
print(nx.is_directed(G))

"""# Directional Graphs"""

G=nx.DiGraph()
print(nx.is_weighted(G))
print(nx.is_directed(G))
G.add_edge(1,2,weight=2)
print(nx.is_weighted(G))
print(nx.is_directed(G))
nx.draw(G)

G.add_edges_from([(1,3),(3,2)])
nx.draw(G)

G.edges

G.nodes

for node in G.nodes:
  print(node)
  print(list(G.neighbors(node)))

G.number_of_nodes()

G.number_of_edges()

"""# Adjacency Matrix"""

A=nx.adjacency_matrix(G)
print(A.todense())

A.setdiag(A.diagonal()*2)
print(A.todense())

A=nx.to_numpy_array(G)
print(A)

A.diagonal()

